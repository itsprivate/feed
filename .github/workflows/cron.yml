name: cron tasks
on:
  repository_dispatch:
    types: [schedule]
  workflow_dispatch:
    inputs:
      force_all:
        default: "0"
        description: "Force all sites to build"
        type: string
        required: false
      site:
        default: ""
        description: "Site to build"
        type: string
        required: false
      translate_count:
        description: "translate count"
        required: false
        default: "-1"
      translate_timeout:
        description: "translate timeout in minutes"
        required: false
        default: "120"
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
  # schedule:
  #   - cron: "*/30 * * * *"
jobs:
  build:
    runs-on: ubuntu-latest
    concurrency: build
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: print aws cli version
        run: aws --version
      - id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2.22.35 # default
          verbose: false # default
          arch: amd64 # allowed values: amd64, arm64
      - name: print aws cli version
        run: aws --version
      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"
      - name: install wrangler
        run: npm install -g wrangler
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v2.5.4
      - uses: actions/cache@v3
        with:
          path: |
            ~/.deno
            ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('**/*deps.ts') }}
      - run: make prod-load
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{secrets.AWS_DEFAULT_REGION}}
          AWS_ENDPOINT: ${{secrets.AWS_ENDPOINT}}
      # - run: make install
      - run: make prod-source
        # - run: make prod-sourcesite site=china
        id: source
        continue-on-error: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          IM_DEEPL_AUTH_KEY: ${{secrets.IM_DEEPL_AUTH_KEY}}
          IM_DEEPL_TOKEN: ${{secrets.IM_DEEPL_TOKEN}}
          AWS_DEFAULT_REGION: ${{secrets.AWS_DEFAULT_REGION}}
          AWS_ENDPOINT: ${{secrets.AWS_ENDPOINT}}
          TWITTER_BEARER_TOKEN: ${{secrets.TWITTER_BEARER_TOKEN}}
          TWITTER_ACCESS_TOKEN: ${{secrets.TWITTER_ACCESS_TOKEN}}
          TWITTER_ACCESS_TOKEN_SECRET: ${{secrets.TWITTER_ACCESS_TOKEN_SECRET}}
          TWITTER_CONSUMER_SECRET: ${{secrets.TWITTER_CONSUMER_SECRET}}
          PRODUCTHUNT_TOKEN: ${{secrets.PRODUCTHUNT_TOKEN}}
          TRANSLATE_COUNT: ${{ github.event.inputs.translate_count }}
          TRANSLATE_TIMEOUT: ${{ github.event.inputs.translate_timeout }}
          ALL: ${{ github.event_name=='push' && '1' ||  github.event.inputs.force_all }}
          SITE: ${{ github.event.inputs.site }}
          GOOGLE_COOKIE: ${{secrets.GOOGLE_COOKIE}}
      - name: upload files
        run: make prod-upload
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{secrets.AWS_DEFAULT_REGION}}
          AWS_ENDPOINT: ${{secrets.AWS_ENDPOINT}}
          DUFS_URL: ${{secrets.DUFS_URL}}
          DUFS_SECRETS: ${{secrets.DUFS_SECRETS}}
      - name: upload temp folder to github action for debug
        uses: actions/upload-artifact@v4
        with:
          name: temp
          path: temp
          if-no-files-found: ignore
      - name: throw if source failed
        if: steps.source.outcome == 'failure'
        run: |
          echo "::error::Source build failed"
          exit 1
      - name: Publish pages
        if: true
        run: make prod-publishall
        timeout-minutes: 30
        env:
          SITE: ${{ github.event.inputs.site }}
          CLOUDFLARE_ACCOUNT_ID: ${{secrets.CLOUDFLARE_ACCOUNT_ID}}
          CLOUDFLARE_API_TOKEN: ${{secrets.CLOUDFLARE_API_TOKEN}}
